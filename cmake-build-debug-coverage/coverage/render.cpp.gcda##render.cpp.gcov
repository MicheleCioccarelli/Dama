        -:    0:Source:/home/sedano/CLionProjects/Dama/render/render.cpp
        -:    0:Graph:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/render/render.cpp.gcno
        -:    0:Data:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/render/render.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "render.h"
        -:    2:
        -:    3:/*  PIECES LABLE
        -:    4: * horizontalLine = "═"
        -:    5: * topLeft = "╔"
        -:    6: * topRight = "╗"
        -:    7: * bottomLeft = "╚"
        -:    8: * bottomRight = "╝"
        -:    9: * upChain = "╦"
        -:   10: * downChain = "╩"
        -:   11: * link = "╬"
        -:   12: * filling = " "
        -:   13: *leftBorder = "╠"
        -:   14: * rightBorder "╣"
        -:   15: *
        -:   16: * tokens.[0] = horizontalLine
        -:   17: * tokens.[1](verticalLine);
        -:   18: * tokens.[2](topLeft);
        -:   19: * tokens.[3](topRight);
        -:   20: * tokens.[4](bottomLeft);
        -:   21: * tokens.[5](bottomRight);
        -:   22: * tokens.[6](upChain);
        -:   23: * tokens.[7](downChain);
        -:   24: * tokens.[8](rightBorder);
        -:   25: * tokens.[9](link);
        -:   26: * tokens.[10](leftBorder);
        -:   27: * tokens.[11](filling);
        -:   28:*/
        -:   29:// ======= RENDER =======
       64:   30:std::string StdRender::square_resolve(Coords coords, Board &board) {
       64:   31:    switch (board.matrix[coords.row][coords.column].piece) {
        -:   32:
       12:   33:        case DAMA_B:
       12:   34:            return setPieces.damaB;
       13:   35:        case DAMA_N:
       13:   36:            return setPieces.damaN;
    #####:   37:        case DAMONE_B:
    #####:   38:            return setPieces.damoneB;
    #####:   39:        case DAMONE_N:
    #####:   40:            return setPieces.damoneN;
       39:   41:        case VUOTA:
       39:   42:            return setPieces.vuota;
    #####:   43:        case COLORATA:
    #####:   44:            return setPieces.colorata;
    #####:   45:        default:
    #####:   46:            return "sup motherfucker";
        -:   47:    }
        -:   48:}
        -:   49:
       72:   50:void StdRender::border(std::string &lastChar) {
      216:   51:    std::cout << boardTokens.horizontalLine << boardTokens.horizontalLine << boardTokens.horizontalLine
       72:   52:              << boardTokens.horizontalLine << boardTokens.horizontalLine << lastChar;
       72:   53:}
        -:   54:
        1:   55:void StdRender::first_line() {
        1:   56:    std::cout << "   " << boardTokens.topLeft;
        8:   57:    for (int i = 1; i < columns; i++) {
        7:   58:        border(boardTokens.upChain);
        -:   59:    }
        1:   60:    border(boardTokens.topRight);
        1:   61:    std::cout << std::endl;
        1:   62:}
        -:   63:
        1:   64:void StdRender::bottom_line(PlayerColor color) {
        1:   65:    std::cout << "   " << boardTokens.bottomLeft;
        8:   66:    for (int i = 1; i < columns; i++) {
        7:   67:        border(boardTokens.downChain);
        -:   68:    }
        1:   69:    border(boardTokens.bottomRight);
        1:   70:    std::cout << std::endl;
        -:   71:
        1:   72:    if (color == BIANCO) {
        2:   73:        std::cout << "      " << boardCoords.a << "  " << "   " << boardCoords.b << "     "
        3:   74:                  << boardCoords.c << "     " << boardCoords.d << "     " << boardCoords.e
        1:   75:                  << "     " << boardCoords.f << "     " << boardCoords.g << "     " << boardCoords.h << std::endl;
        -:   76:    } else {
    #####:   77:        std::cout << "      " << boardCoords.h << "  " << "   " << boardCoords.g << "     "
    #####:   78:                  << boardCoords.f << "     " << boardCoords.e << "     " << boardCoords.d
    #####:   79:                  << "     " << boardCoords.c << "     " << boardCoords.b << "     " << boardCoords.a << std::endl;
        -:   80:    }
        -:   81:
        1:   82:}
        -:   83:
        7:   84:void StdRender::line() {
        7:   85:    std::cout << "   " << boardTokens.leftBorder;
       56:   86:    for (int i = 1; i < columns; i++) {
       49:   87:        border(boardTokens.link);
        -:   88:    }
        7:   89:    border(boardTokens.rightBorder);
        7:   90:    std::cout << std::endl;
        7:   91:}
        -:   92:
        1:   93:void StdRender::middle(Board &b, PlayerColor color) {
        1:   94:    switch (color) {
        1:   95:        case BIANCO:
        9:   96:            for (int row = rows - 1; row >= 0; row--) {
        8:   97:                std::cout << row + 1 << "  ";
       72:   98:                for (int col = 0; col < columns; col++) {
       64:   99:                    std::cout << boardTokens.verticalLine << "  " <<
       64:  100:                              square_resolve(Coords((ColumnNotation) col, row), b) << "  ";
        -:  101:                }
        8:  102:                std::cout << boardTokens.verticalLine << std::endl;
        8:  103:                if (row != 0) {
        7:  104:                    line();
        -:  105:                }
        -:  106:            }
        1:  107:            bottom_line(color);
        1:  108:            break;
    #####:  109:        case NERO:
    #####:  110:            for (int row = 0; row < rows; row++) {
    #####:  111:                std::cout << row + 1 << "  ";
    #####:  112:                for (int col = columns - 1; col >= 0; col--) {
    #####:  113:                    std::cout << boardTokens.verticalLine << "  " <<
    #####:  114:                              square_resolve(Coords((ColumnNotation) col, row), b) << "  ";
        -:  115:                }
    #####:  116:                std::cout << boardTokens.verticalLine << std::endl;
    #####:  117:                if (row != columns - 1) {
    #####:  118:                    line();
        -:  119:                }
        -:  120:            }
    #####:  121:            bottom_line(color);
    #####:  122:            break;
        -:  123:    }
        1:  124:}
        -:  125:
        1:  126:void StdRender::render_board(PlayerColor color, Board &b) {
        1:  127:    std::cout << std::endl << std::endl;
        1:  128:    first_line();
        1:  129:    middle(b, color);
        1:  130:    std::cout << std::endl << std::endl;
        1:  131:}
