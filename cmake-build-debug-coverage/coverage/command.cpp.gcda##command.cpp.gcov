        -:    0:Source:/home/sedano/CLionProjects/Dama/command/command.cpp
        -:    0:Graph:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/command/command.cpp.gcno
        -:    0:Data:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/command/command.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "command.h"
        -:    2:
        2:    3:void Command::convert_coords(const std::string& toConvert, Coords& converted) {
        -:    4:    // Initialize startingColumn
        2:    5:    switch (toConvert[0]) {
        1:    6:        case 'A':
        1:    7:            converted.column = A;
        1:    8:            break;
        1:    9:        case 'B':
        1:   10:            converted.column = B;
        1:   11:            break;
    #####:   12:        case 'C':
    #####:   13:            converted.column = C;
    #####:   14:            break;
    #####:   15:        case 'D':
    #####:   16:            converted.column = D;
    #####:   17:            break;
    #####:   18:        case 'E':
    #####:   19:            converted.column = E;
    #####:   20:            break;
    #####:   21:        case 'F':
    #####:   22:            converted.column = F;
    #####:   23:            break;
    #####:   24:        case 'G':
    #####:   25:            converted.column = G;
    #####:   26:            break;
    #####:   27:        case 'H':
    #####:   28:            converted.column = H;
    #####:   29:            break;
    #####:   30:        default:
    #####:   31:            converted.column = Z;
        -:   32:    }
        -:   33:    // Initialize startingRow
       2*:   34:    if (toConvert[1] - 48 < 0 || toConvert[1] > 57) {
    #####:   35:        converted.row = 9;
        -:   36:    } else {
        2:   37:        converted.row = (int) toConvert[1] - 48;
        -:   38:    }
        2:   39:}
        -:   40:
        2:   41:Command::Command(std::string& input, GameEngine& engine) {
        2:   42:    if (input == "~") {
        1:   43:        type = UNINITIALIZED;
        -:   44:    } else {
        1:   45:        Coords eatenCoord;
        1:   46:        switch (input[2]) {
    #####:   47:            case '-':
    #####:   48:                type = MOVE;
    #####:   49:                convert_coords(input.substr(0, 2), startingCoords);
    #####:   50:                convert_coords(input.substr(3, 5), endingCoords);
    #####:   51:                break;
    #####:   52:            case '*':
    #####:   53:                type = BLOW;
    #####:   54:                convert_coords(input.substr(0, 2), startingCoords);
    #####:   55:                convert_coords(input.substr(3, 5), endingCoords);
    #####:   56:                if (engine.check_blow(startingCoords, endingCoords) != BLOWABLE) {
        -:   57:                    // If the move is invalid, uninitialize the coords;
    #####:   58:                    startingCoords = Coords();
    #####:   59:                    endingCoords = Coords();
        -:   60:                }
    #####:   61:                break;
        1:   62:            case 'x':
        1:   63:                type = EAT;
        1:   64:                convert_coords(input.substr(0, 2), startingCoords);
        1:   65:                eatenCoords.push_back(startingCoords);
        2:   66:                for (int i = 3; i <= input.size(); i += 3) {
        1:   67:                    convert_coords(input.substr(i, i + 1), eatenCoord);
        1:   68:                    eatenCoords.push_back(eatenCoord);
        -:   69:                }
        1:   70:                endingCoords = Coords();
        1:   71:                startingCoords = Coords();
        1:   72:                break;
    #####:   73:            default:
    #####:   74:                type = WRONG_OPERATOR;
    #####:   75:                break;
        -:   76:        }
        -:   77:    }
        -:   78://    eatenCoords.emplace_back(Coords());
        2:   79:}
