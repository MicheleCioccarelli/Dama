        -:    0:Source:/home/sedano/CLionProjects/Dama/ui/ui.cpp
        -:    0:Graph:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/ui/ui.cpp.gcno
        -:    0:Data:/home/sedano/CLionProjects/Dama/cmake-build-debug-coverage/CMakeFiles/MakeDamaGreatAgain.dir/ui/ui.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ui.h"
        -:    2:
        1:    3:MoveType UI::command_to_move(const std::vector<Command>& commands, Move &move) {
       1*:    4:    for (int i = 0; i < commands.size(); i++) {
        1:    5:        switch (commands[i].type) {
    #####:    6:            case BLOW:
    #####:    7:                move.blownCoord = commands[i].startingCoords;
    #####:    8:                break;
    #####:    9:            case MOVE:
    #####:   10:                move.type = MOVE;
    #####:   11:                move.add_coords(commands[i].startingCoords);
    #####:   12:                move.add_coords(commands[i].endingCoords);
    #####:   13:                i = commands.size();
    #####:   14:                break;
        1:   15:            case EAT:
        1:   16:                move.type = EAT;
        3:   17:                for (int j = 0; j < commands[i].eatenCoords.size(); j++) {
        2:   18:                    move.coords.push_back(commands[i].eatenCoords[j]);
        -:   19:                }
        1:   20:                i = commands.size();
        1:   21:            case UNINITIALIZED:
        1:   22:                i = commands.size();
        1:   23:            case  TOO_SHORT:
        1:   24:                return TOO_SHORT;
    #####:   25:            case WRONG_OPERATOR:
    #####:   26:                return WRONG_OPERATOR;
        -:   27:        }
        -:   28:    }
    #####:   29:    return OK;
        -:   30:}
        -:   31:
        1:   32:void UI::get_move(Move& move, GameEngine& engine) {
        1:   33:    std::vector<std::string> input;
        1:   34:    std::vector<Command> commands;
        -:   35:
        1:   36:    std::string a;
        1:   37:    std::cout << "Move" << std::endl;
        1:   38:    getline(std::cin, a);
        1:   39:    std::stringstream stream(a);
        -:   40:
        -:   41:    // Initializing the strings
        1:   42:    input.emplace_back("~");
        1:   43:    input.emplace_back("~");
        -:   44:
        3:   45:    for (int i = 0; i < MAX_COMMANDS; i++) {
        2:   46:        stream >> input[i];
        2:   47:        std::cout << input[i] << std::endl;
        -:   48:
       2*:   49:        if (input[i].size() < 5 && input[i] != "~") {
    #####:   50:            move.type = TOO_SHORT;
    #####:   51:            return;
        -:   52:        }
        2:   53:        commands.emplace_back(input[i], engine);
        -:   54:    }
        -:   55:
        1:   56:    command_to_move(commands, move);
        -:   57:}
